{"version":3,"file":"static/js/239.61a218a6.chunk.js","mappings":"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","sources":["components/backButton/backButton.tsx","features/getCurrentDate.ts","components/gameCard/gameItem.tsx","components/gameCard/gameCard.tsx","pages/game.tsx"],"sourcesContent":["import React from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport './backButton.css'\r\n\r\nexport const BackButton = () => {\r\n    const navigate = useNavigate()\r\n    return (\r\n        <div className='backButton__wrapper'>\r\n            <button\r\n                className='button backButton'\r\n                onClick={() => navigate(-1)}\r\n            >\r\n                GO BACK\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","export const getCurrentDate = () => {\r\n    const currentdate = new Date()\r\n    const result =\r\n        currentdate.getDate() +\r\n        '/' +\r\n        (currentdate.getMonth() + 1) +\r\n        '/' +\r\n        currentdate.getFullYear() +\r\n        ' ' +\r\n        currentdate.getHours() +\r\n        ':' +\r\n        currentdate.getMinutes() +\r\n        ':' +\r\n        currentdate.getSeconds()\r\n\r\n    return new Date().toISOString()\r\n}\r\n","import { getCurrentDate } from '../../features/getCurrentDate'\r\nimport {\r\n    IHistoryQueryParams,\r\n    IUserFavoritesProps,\r\n} from '../../types/firestoreApiTypes'\r\nimport { BackButton } from '../backButton/backButton'\r\nimport React from 'react'\r\n\r\ninterface IGameItem {\r\n    name: string\r\n    gameId: number\r\n    rating: number\r\n    releaseDate: string\r\n    image: string\r\n    description: string\r\n    isAuth: boolean\r\n    isInFavorites?: boolean\r\n    triggerUpdate: (value: IUserFavoritesProps) => void\r\n    triggerGet: (value: IHistoryQueryParams) => void\r\n    email: string | null\r\n}\r\n\r\nexport const GameItem = ({\r\n    name,\r\n    gameId,\r\n    rating,\r\n    releaseDate,\r\n    image,\r\n    description,\r\n    isAuth,\r\n    isInFavorites,\r\n    triggerUpdate,\r\n    triggerGet,\r\n    email,\r\n}: IGameItem) => {\r\n    return (\r\n        <>\r\n            <BackButton />\r\n            <div className='game'>\r\n                <h2 className='game__name'>{name}</h2>\r\n                <span className='game__rating'>Rating: {rating}/5</span>\r\n                <span className='game__date'>Released date:{releaseDate}</span>\r\n                <img\r\n                    className='game__img'\r\n                    src={image}\r\n                    alt={name}\r\n                />\r\n                <button\r\n                    disabled={!isAuth || isInFavorites}\r\n                    className='game__add'\r\n                    onClick={() => {\r\n                        triggerUpdate({\r\n                            id: String(gameId),\r\n                            email: email,\r\n                            name: name,\r\n                            background_image: image,\r\n                            date: getCurrentDate(),\r\n                        })\r\n                        triggerGet({ email: email })\r\n                    }}\r\n                >\r\n                    {isInFavorites ? 'In Favorites' : `Add to Favorite`}\r\n                </button>\r\n                <span className='game__description'>{description}</span>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { GameItem } from './gameItem'\r\nimport { useGetSingleGameQuery } from '../../api/gamesAPI'\r\nimport { useAuthorization } from '../../store/hooks'\r\nimport {\r\n    useGetUserFavoritesQuery,\r\n    useLazyGetUserFavoritesQuery,\r\n    useLazyUpdateUserFavoritesQuery,\r\n} from '../../api/firestoreApi'\r\nimport { Loader } from '../loader/loader'\r\nimport React from 'react'\r\nimport './gameCard.css'\r\nimport PropTypes from 'prop-types'\r\n\r\ninterface IgameCardProps {\r\n    gameId: number\r\n}\r\n\r\nfunction GameCard({ gameId }: IgameCardProps) {\r\n    const { email, isAuth } = useAuthorization()\r\n    const { data, isLoading, isFetching, isSuccess, isError, error } =\r\n        useGetSingleGameQuery({ gameId: gameId })\r\n    const { data: dataFav, isSuccess: isSuccessFav } = useGetUserFavoritesQuery(\r\n        { email: email }\r\n    )\r\n\r\n    const [trigger] = useLazyUpdateUserFavoritesQuery()\r\n    const [triggerGet] = useLazyGetUserFavoritesQuery()\r\n\r\n    let content\r\n\r\n    if (isAuth) {\r\n        if (isLoading || isFetching) {\r\n            content = <Loader />\r\n        } else if (isSuccess && isSuccessFav) {\r\n            const dataArrFav = Object.values(dataFav)\r\n            const IdsArr = dataArrFav.map(e => {\r\n                return Number(e.id)\r\n            })\r\n            const isInFavorites = IdsArr.includes(gameId)\r\n\r\n            content = (\r\n                <GameItem\r\n                    name={data.name}\r\n                    gameId={gameId}\r\n                    rating={data.rating}\r\n                    releaseDate={data.released}\r\n                    image={data.background_image}\r\n                    description={data.description_raw}\r\n                    isAuth={isAuth}\r\n                    isInFavorites={isInFavorites}\r\n                    triggerUpdate={trigger}\r\n                    triggerGet={triggerGet}\r\n                    email={email}\r\n                />\r\n            )\r\n        } else if (isSuccess) {\r\n            content = (\r\n                <GameItem\r\n                    name={data.name}\r\n                    gameId={gameId}\r\n                    rating={data.rating}\r\n                    releaseDate={data.released}\r\n                    image={data.background_image}\r\n                    description={data.description_raw}\r\n                    isAuth={isAuth}\r\n                    triggerUpdate={trigger}\r\n                    triggerGet={triggerGet}\r\n                    email={email}\r\n                />\r\n            )\r\n        } else if (isError) {\r\n            content = <div>{error.toString()}</div>\r\n        }\r\n\r\n        return <div>{content}</div>\r\n    } else if (isLoading || isFetching) {\r\n        content = <Loader />\r\n    } else if (isSuccess) {\r\n        content = (\r\n            <GameItem\r\n                name={data.name}\r\n                gameId={gameId}\r\n                rating={data.rating}\r\n                releaseDate={data.released}\r\n                image={data.background_image}\r\n                description={data.description_raw}\r\n                isAuth={isAuth}\r\n                triggerUpdate={trigger}\r\n                triggerGet={triggerGet}\r\n                email={email}\r\n            />\r\n        )\r\n    } else if (isError) {\r\n        content = <div>{error.toString()}</div>\r\n    }\r\n\r\n    return <div>{content}</div>\r\n}\r\n\r\nGameCard.propTypes = {\r\n    gameId: PropTypes.number,\r\n}\r\n\r\nexport { GameCard }\r\n","import { GameCard } from '../components/gameCard/gameCard'\r\nimport { useParams } from 'react-router-dom'\r\nimport React from 'react'\r\n\r\nfunction Game() {\r\n    const { id } = useParams()\r\n    const gameId = Number(id)\r\n\r\n    return <GameCard gameId={gameId} />\r\n}\r\n\r\nexport { Game as default }\r\n"],"names":["BackButton","navigate","useNavigate","_jsx","className","children","onClick","getCurrentDate","currentdate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","toISOString","GameItem","_ref","name","gameId","rating","releaseDate","image","description","isAuth","isInFavorites","triggerUpdate","triggerGet","email","_jsxs","_Fragment","src","alt","disabled","id","String","background_image","date","GameCard","content","_useAuthorization","useAuthorization","_useGetSingleGameQuer","useGetSingleGameQuery","data","isLoading","isFetching","isSuccess","isError","error","_useGetUserFavoritesQ","useGetUserFavoritesQuery","dataFav","isSuccessFav","_useLazyUpdateUserFav","useLazyUpdateUserFavoritesQuery","trigger","_slicedToArray","_useLazyGetUserFavori","useLazyGetUserFavoritesQuery","Loader","Object","values","map","e","Number","includes","released","description_raw","toString","Game","useParams"],"sourceRoot":""}