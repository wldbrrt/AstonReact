{"version":3,"file":"static/js/461.342a9903.chunk.js","mappings":"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","sources":["components/gameCardPreview/gameCardPreview.tsx","features/getCurrentDate.ts","components/search/searchInput.tsx","components/search/gameList.tsx","components/search/search.tsx","constants/gamePlatforms.ts","components/allGamesList/allGamesList.tsx","components/allGamesList/pageControlls.tsx","pages/home.tsx"],"sourcesContent":["import { useNavigate } from 'react-router-dom'\r\nimport React, { useState } from 'react'\r\n\r\ninterface IGameCardPreview {\r\n    id: number\r\n    image: string\r\n    name: string\r\n    rating?: number\r\n    released: string\r\n    favoriteOnClickHandler?: (\r\n        e: React.MouseEvent<HTMLElement>,\r\n        id: number\r\n    ) => void\r\n    isFauvorite?: boolean\r\n    genres?: string[]\r\n    platforms?: string[]\r\n}\r\n\r\nexport const GameCardPreview = ({\r\n    id,\r\n    image,\r\n    name,\r\n    rating,\r\n    released,\r\n    favoriteOnClickHandler,\r\n    isFauvorite = false,\r\n    genres,\r\n    platforms,\r\n}: IGameCardPreview) => {\r\n    const [isActive, setIsActive] = useState<boolean>()\r\n    const navigate = useNavigate()\r\n\r\n    return (\r\n        <div className='allGamesList__wrapper'>\r\n            <div\r\n                onMouseEnter={() => setIsActive(true)}\r\n                onMouseLeave={() => setIsActive(false)}\r\n                key={id}\r\n                className='allGamesList__item'\r\n                onClick={() => navigate(`/Game/${id}`)}\r\n            >\r\n                {!isFauvorite && genres && platforms && (\r\n                    <div\r\n                        className={\r\n                            isActive\r\n                                ? 'allGamesList__fullInfo allGamesList__fullInfo_Active'\r\n                                : 'allGamesList__fullInfo'\r\n                        }\r\n                    >\r\n                        <div className='allGamesList__fullInfo-description'>\r\n                            <h2 className='allGamesList__name'>{name}</h2>\r\n                            <span className='allGamesList__date_fullInfo'>\r\n                                Released:\r\n                                <br /> {released}\r\n                            </span>\r\n                            <div className='allGamesList__rating_fullInfo'>\r\n                                Rating: {rating} / 5\r\n                            </div>\r\n                            <div className='allgamesList__genres'>\r\n                                {genres.map((e, ind) => (\r\n                                    <div\r\n                                        className='allgamesList__genres-item'\r\n                                        key={ind}\r\n                                    >\r\n                                        {e}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div className='allgamesList__platforms'>\r\n                                {platforms.map((e, ind) => {\r\n                                    if (e) {\r\n                                        return (\r\n                                            <div\r\n                                                className='allgamesList__platforms-item'\r\n                                                key={ind}\r\n                                            >\r\n                                                {e}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className='allGamesList__container'>\r\n                    <img\r\n                        className='allGamesList__img'\r\n                        src={image}\r\n                        alt={name}\r\n                    />\r\n                    <div className='allGamesList__description'>\r\n                        <h2 className='allGamesList__name'>{name}</h2>\r\n                        {isFauvorite && favoriteOnClickHandler ? (\r\n                            <button\r\n                                onClick={e => favoriteOnClickHandler(e, id)}\r\n                                className='favorites__delete button'\r\n                            >\r\n                                Remove from favorites\r\n                            </button>\r\n                        ) : (\r\n                            <div className='allGamesList__rating'>\r\n                                Rating: {rating} / 5\r\n                            </div>\r\n                        )}\r\n                        {isFauvorite ? (\r\n                            <span className='allGamesList__date'>\r\n                                Added:\r\n                                <br /> {released}\r\n                            </span>\r\n                        ) : (\r\n                            <span className='allGamesList__date'>\r\n                                Released:\r\n                                <br /> {released}\r\n                            </span>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export const getCurrentDate = () => {\r\n    const currentdate = new Date()\r\n    const result =\r\n        currentdate.getDate() +\r\n        '/' +\r\n        (currentdate.getMonth() + 1) +\r\n        '/' +\r\n        currentdate.getFullYear() +\r\n        ' ' +\r\n        currentdate.getHours() +\r\n        ':' +\r\n        currentdate.getMinutes() +\r\n        ':' +\r\n        currentdate.getSeconds()\r\n\r\n    return new Date().toISOString()\r\n}\r\n","import React from 'react'\r\nimport './searchInput.css'\r\n\r\ninterface SearchInputProps {\r\n    onChangeHandler: (gameName: string) => void\r\n    onFocusHandler: (isFocused: boolean) => void\r\n    gameName: string\r\n    onKeyDownEvent: () => void\r\n}\r\n\r\nfunction SearchInput({\r\n    onChangeHandler,\r\n    onFocusHandler,\r\n    gameName,\r\n    onKeyDownEvent,\r\n}: SearchInputProps) {\r\n    return (\r\n        <input\r\n            className='search__input input'\r\n            type='text'\r\n            placeholder='Enter game name'\r\n            name='search'\r\n            value={gameName}\r\n            onChange={e => onChangeHandler(e.target.value)}\r\n            onFocus={() => onFocusHandler(true)}\r\n            onBlur={() => setTimeout(() => onFocusHandler(false), 100)}\r\n            onKeyDown={e => {\r\n                if (e.key === 'Enter') {\r\n                    onKeyDownEvent()\r\n                }\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport { SearchInput }\r\n","import { useGetGamesQuery } from '../../api/gamesAPI'\r\nimport { Loader } from '../loader/loader'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport React from 'react'\r\nimport './gameList.css'\r\nimport PropTypes from 'prop-types'\r\n\r\ninterface GameListProps {\r\n    pages: number\r\n    size: number\r\n    name: string\r\n    isInputFocused: boolean\r\n}\r\n\r\nfunction GameList({ pages, size, name, isInputFocused }: GameListProps) {\r\n    const navigate = useNavigate()\r\n    const { data, isLoading, isFetching, isSuccess, isError, error } =\r\n        useGetGamesQuery({ pageNumber: pages, pageSize: size, gameName: name })\r\n\r\n    let content\r\n    if (isLoading || isFetching) {\r\n        content = (\r\n            <div className='search__loader'>\r\n                <Loader />\r\n            </div>\r\n        )\r\n    } else if (isSuccess && !data?.count) {\r\n        content = 'Nothing has found'\r\n    } else if (isSuccess) {\r\n        content = data.results.map(game => (\r\n            <div\r\n                key={game.id}\r\n                className='search__item'\r\n                onClick={() => {\r\n                    navigate(`/Game/${game.id}`)\r\n                }}\r\n            >\r\n                <img\r\n                    className='search__img'\r\n                    src={game.background_image}\r\n                    alt={game.name}\r\n                />\r\n                <h2>{game.name}</h2>\r\n                <span>{game.released}</span>\r\n            </div>\r\n        ))\r\n    } else if (isError) {\r\n        content = <div>{error.toString()}</div>\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                name && isInputFocused\r\n                    ? 'search__list'\r\n                    : 'search__list search__list_hidden'\r\n            }\r\n        >\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nGameList.propTypes = {\r\n    pages: PropTypes.number,\r\n    size: PropTypes.number,\r\n    name: PropTypes.string,\r\n    isInputFocused: PropTypes.bool,\r\n}\r\n\r\nexport { GameList }\r\n","import { SearchInput } from './searchInput'\r\nimport { GameList } from './gameList'\r\nimport { getCurrentDate } from '../../features/getCurrentDate'\r\nimport { useAuthorization, useDebounce } from '../../store/hooks'\r\nimport {\r\n    useLazyGetUserHistoryQuery,\r\n    useLazyUpdateUserHistoryQuery,\r\n} from '../../api/firestoreApi'\r\nimport React, { useState } from 'react'\r\nimport './search.css'\r\n\r\ninterface SearchProps {\r\n    onClickHandler: (gameName: string) => void\r\n    onClickPageReset: (pageNumber: number) => void\r\n}\r\n\r\nfunction Search({ onClickHandler, onClickPageReset }: SearchProps) {\r\n    const { isAuth } = useAuthorization()\r\n    const { email } = useAuthorization()\r\n    const [triggerUpdateData] = useLazyUpdateUserHistoryQuery()\r\n    const [triggerGetData] = useLazyGetUserHistoryQuery()\r\n    const [gameName, setGameName] = useState('')\r\n    const [isFocused, setIsFocused] = useState(false)\r\n    const debouncedValue = useDebounce(gameName, 800)\r\n\r\n    const searchEventHandler = async () => {\r\n        onClickHandler(gameName)\r\n        onClickPageReset(1)\r\n        setGameName('')\r\n        if (gameName && isAuth) {\r\n            await triggerUpdateData({\r\n                email: email,\r\n                name: gameName,\r\n                date: getCurrentDate(),\r\n            })\r\n            await triggerGetData({\r\n                email: email,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='search'>\r\n            <SearchInput\r\n                onChangeHandler={setGameName}\r\n                onFocusHandler={setIsFocused}\r\n                gameName={gameName}\r\n                onKeyDownEvent={searchEventHandler}\r\n            />\r\n            <button\r\n                className='search__button'\r\n                onClick={searchEventHandler}\r\n            >\r\n                <svg\r\n                    className='search__icon'\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    width='30'\r\n                    height='30'\r\n                    viewBox='0 0 30 30'\r\n                    fill='none'\r\n                >\r\n                    <path\r\n                        d='M29.6093 27.724L21.6243 19.7387C23.3516 17.591 24.2916 14.9413 24.2916 12.1457C24.2916 8.90133 23.0283 5.85133 20.7339 3.557C18.4399 1.26333 15.3903 0 12.146 0C8.90164 0 5.85165 1.26333 3.55732 3.55733C1.26333 5.85133 0 8.90167 0 12.146C0 15.3903 1.26333 18.4403 3.55732 20.7343C5.85132 23.0287 8.90164 24.292 12.146 24.292C14.9416 24.292 17.5913 23.352 19.7389 21.6247L27.7239 29.6097C27.9839 29.8697 28.3256 30 28.6666 30C29.0076 30 29.3493 29.8697 29.6093 29.6093C30.1302 29.089 30.1302 28.2443 29.6093 27.724ZM5.44298 18.8487C3.65266 17.0583 2.66666 14.678 2.66666 12.146C2.66666 9.614 3.65266 7.23367 5.44298 5.44333C7.23331 3.653 9.61397 2.66667 12.146 2.66667C14.678 2.66667 17.0583 3.65267 18.8486 5.443C20.6389 7.23333 21.6249 9.614 21.6249 12.1457C21.6249 14.6777 20.6389 17.058 18.8486 18.8483C17.0583 20.6387 14.678 21.6247 12.146 21.6247C9.61397 21.625 7.23331 20.639 5.44298 18.8487Z'\r\n                        fillOpacity='0.7'\r\n                    />\r\n                </svg>\r\n            </button>\r\n            <GameList\r\n                pages={1}\r\n                size={5}\r\n                name={debouncedValue}\r\n                isInputFocused={isFocused}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport { Search }\r\n","export const gamePlatforms: IGamePlatforms = {\r\n    PlayStation: 'PS',\r\n    'PlayStation 2': 'PS',\r\n    'PlayStation 3': 'PS',\r\n    'PlayStation 4': 'PS',\r\n    'PlayStation 5': 'PS',\r\n    'PS Vita': 'PS',\r\n    'Xbox Series S/X': 'XBOX',\r\n    'Xbox 360': 'XBOX',\r\n    'Xbox One': 'XBOX',\r\n    PC: 'PC',\r\n    macOS: 'MAC',\r\n    iOS: 'IOS',\r\n    Linux: 'Linux',\r\n    'Nintendo Switch': 'Switch',\r\n}\r\n\r\ninterface IGamePlatforms {\r\n    [key: string]: string\r\n}\r\n","import { Loader } from '../loader/loader'\r\nimport { GameCardPreview } from '../gameCardPreview/gameCardPreview'\r\nimport { gamePlatforms } from '../../constants/gamePlatforms'\r\nimport { ApiResponse } from '../../types/gamesApiTypes'\r\nimport React, { useEffect } from 'react'\r\nimport './allGamesList.css'\r\n\r\ninterface GameListProps {\r\n    isLastPageSetter: (value: boolean) => void\r\n    data: ApiResponse | undefined\r\n    isLoading: boolean\r\n    isFetching: boolean\r\n    isSuccess: boolean\r\n    isError: boolean\r\n}\r\n\r\nfunction AllGamesList({\r\n    isLastPageSetter,\r\n    data,\r\n    isLoading,\r\n    isFetching,\r\n    isSuccess,\r\n    isError,\r\n}: GameListProps) {\r\n    useEffect(() => {\r\n        if (data) {\r\n            isLastPageSetter(Boolean(!data.next))\r\n        } else {\r\n            isLastPageSetter(true)\r\n        }\r\n    }, [data])\r\n\r\n    let content\r\n    if (isLoading || isFetching) {\r\n        content = <Loader />\r\n    } else if (isSuccess && !data?.count) {\r\n        content = 'Nothing has found'\r\n    } else if (isSuccess && data) {\r\n        content = data.results.map(game => {\r\n            const platfromsSet = new Set(\r\n                game.platforms.map(e => gamePlatforms[e.platform.name])\r\n            )\r\n            return (\r\n                <GameCardPreview\r\n                    key={game.id}\r\n                    id={game.id}\r\n                    image={game.background_image}\r\n                    name={game.name}\r\n                    rating={game.rating}\r\n                    released={game.released}\r\n                    genres={game.genres.map(e => e.name)}\r\n                    platforms={Array.from(platfromsSet)}\r\n                />\r\n            )\r\n        })\r\n    } else if (isError) {\r\n        content = <div>{'SOMETHING WENT WRONG'}</div>\r\n    }\r\n\r\n    return <div className='allGamesList'>{content}</div>\r\n}\r\n\r\nexport { AllGamesList }\r\n","import React from 'react'\r\nimport './pageControlls.css'\r\n\r\ninterface PageControllsProps {\r\n    page: number\r\n    onClickHandler: (page: number) => void\r\n    isLastPage: boolean\r\n    isLoading: boolean\r\n    isFetching: boolean\r\n}\r\n\r\nfunction PageControlls({\r\n    page,\r\n    onClickHandler,\r\n    isLastPage,\r\n    isLoading,\r\n    isFetching,\r\n}: PageControllsProps) {\r\n    const scrollToTop = () => {\r\n        window.scrollTo({ top: 0 })\r\n    }\r\n\r\n    return (\r\n        <div className='pageControlls'>\r\n            <button\r\n                disabled={page <= 1 || isLoading || isFetching}\r\n                onClick={() => {\r\n                    onClickHandler(1)\r\n                    scrollToTop()\r\n                }}\r\n                className='pageControlls_button button pageControlls__button_toFirst'\r\n            >\r\n                <svg\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    width='26'\r\n                    height='32'\r\n                    viewBox='0 0 26 32'\r\n                    fill='none'\r\n                >\r\n                    <path\r\n                        className='pageControlls_icon'\r\n                        d='M0.292893 23.2929C-0.0976311 23.6834 -0.0976311 24.3166 0.292893 24.7071L6.65685 31.0711C7.04738 31.4616 7.68054 31.4616 8.07107 31.0711C8.46159 30.6805 8.46159 30.0474 8.07107 29.6569L2.41421 24L8.07107 18.3431C8.46159 17.9526 8.46159 17.3195 8.07107 16.9289C7.68054 16.5384 7.04738 16.5384 6.65685 16.9289L0.292893 23.2929ZM26 23L1 23L1 25L26 25V23ZM26 25V0H24V25H26Z'\r\n                    />\r\n                </svg>\r\n                to №1\r\n            </button>\r\n            <button\r\n                disabled={page <= 1 || isLoading || isFetching}\r\n                onClick={() => {\r\n                    onClickHandler(page - 1)\r\n                    scrollToTop()\r\n                }}\r\n                className='pageControlls_button button'\r\n            >\r\n                <svg\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    width='26'\r\n                    height='16'\r\n                    viewBox='0 0 26 16'\r\n                    fill='none'\r\n                >\r\n                    <path\r\n                        className='pageControlls_icon'\r\n                        d='M0.292892 7.2929C-0.0976315 7.68342 -0.0976314 8.31658 0.292893 8.70711L6.65686 15.0711C7.04738 15.4616 7.68054 15.4616 8.07107 15.0711C8.46159 14.6805 8.46159 14.0474 8.07107 13.6569L2.41421 8L8.07107 2.34315C8.46159 1.95262 8.46159 1.31946 8.07107 0.928934C7.68054 0.538409 7.04738 0.538409 6.65685 0.928934L0.292892 7.2929ZM26 7L1 7L1 9L26 9L26 7Z'\r\n                    />\r\n                </svg>\r\n                prev\r\n            </button>\r\n            <button\r\n                disabled={isLastPage || isLoading || isFetching}\r\n                onClick={() => {\r\n                    onClickHandler(page + 1)\r\n                    scrollToTop()\r\n                }}\r\n                className='pageControlls_button button'\r\n            >\r\n                next\r\n                <svg\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    width='26'\r\n                    height='16'\r\n                    viewBox='0 0 26 16'\r\n                    fill='none'\r\n                >\r\n                    <path\r\n                        className='pageControlls_icon'\r\n                        d='M25.7071 8.70711C26.0976 8.31658 26.0976 7.68342 25.7071 7.29289L19.3431 0.928932C18.9526 0.538408 18.3195 0.538408 17.9289 0.928932C17.5384 1.31946 17.5384 1.95262 17.9289 2.34315L23.5858 8L17.9289 13.6569C17.5384 14.0474 17.5384 14.6805 17.9289 15.0711C18.3195 15.4616 18.9526 15.4616 19.3431 15.0711L25.7071 8.70711ZM0 9L25 9V7L0 7L0 9Z'\r\n                    />\r\n                </svg>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { PageControlls }\r\n","import { Search } from '../components/search/search'\r\nimport { AllGamesList } from '../components/allGamesList/allGamesList'\r\nimport { PageControlls } from '../components/allGamesList/pageControlls'\r\nimport { Theme } from '../App'\r\nimport { useGetGamesQuery } from '../api/gamesAPI'\r\nimport { useSearchParams } from 'react-router-dom'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport './home.css'\r\n\r\nfunction Home() {\r\n    const [value, setValue] = useSearchParams()\r\n    const [gameName, setGameName] = useState<string>(value.get('search') || '')\r\n    const [pageNumber, setPagenumber] = useState(Number(value.get('page')) || 1)\r\n    const [isLastPage, setIsLastPage] = useState(true)\r\n    const { lightTheme } = useContext(Theme)\r\n\r\n    const { data, isLoading, isFetching, isSuccess, isError } =\r\n        useGetGamesQuery({\r\n            pageNumber: Number(value.get('page')) || 1,\r\n            pageSize: 20,\r\n            gameName: value.get('search') || '',\r\n        })\r\n\r\n    useEffect(() => {\r\n        setValue(params => {\r\n            params.set('search', gameName)\r\n            params.set('page', String(pageNumber))\r\n            return params\r\n        })\r\n    }, [gameName, pageNumber])\r\n\r\n    useEffect(() => {\r\n        setGameName(value.get('search') || '')\r\n        setPagenumber(Number(value.get('page')))\r\n    }, [value])\r\n\r\n    return (\r\n        <div className={lightTheme ? 'home' : 'home _black'}>\r\n            <Search\r\n                onClickHandler={setGameName}\r\n                onClickPageReset={setPagenumber}\r\n            />\r\n            <h1 className='home__title'>{gameName ? gameName : 'top games'}</h1>\r\n            {isSuccess && !isError && !!data?.count && (\r\n                <PageControlls\r\n                    page={pageNumber}\r\n                    onClickHandler={setPagenumber}\r\n                    isLastPage={isLastPage}\r\n                    isLoading={isLoading}\r\n                    isFetching={isFetching}\r\n                />\r\n            )}\r\n            <AllGamesList\r\n                isLastPageSetter={setIsLastPage}\r\n                data={data}\r\n                isLoading={isLoading}\r\n                isFetching={isFetching}\r\n                isSuccess={isSuccess}\r\n                isError={isError}\r\n            />\r\n            {isSuccess && !isError && !!data?.count && (\r\n                <PageControlls\r\n                    page={pageNumber}\r\n                    onClickHandler={setPagenumber}\r\n                    isLastPage={isLastPage}\r\n                    isLoading={isLoading}\r\n                    isFetching={isFetching}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Home as default }\r\n"],"names":["GameCardPreview","_ref","id","image","name","rating","released","favoriteOnClickHandler","_ref$isFauvorite","isFauvorite","genres","platforms","_useState","useState","_useState2","_slicedToArray","isActive","setIsActive","navigate","useNavigate","_jsx","className","children","_jsxs","onMouseEnter","onMouseLeave","onClick","concat","map","e","ind","src","alt","getCurrentDate","currentdate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","toISOString","SearchInput","onChangeHandler","onFocusHandler","gameName","onKeyDownEvent","type","placeholder","value","onChange","target","onFocus","onBlur","setTimeout","onKeyDown","key","GameList","content","pages","size","isInputFocused","_useGetGamesQuery","useGetGamesQuery","pageNumber","pageSize","data","isLoading","isFetching","isSuccess","isError","error","Loader","count","results","game","background_image","toString","Search","onClickHandler","onClickPageReset","isAuth","useAuthorization","email","_useLazyUpdateUserHis","useLazyUpdateUserHistoryQuery","triggerUpdateData","_useLazyGetUserHistor","useLazyGetUserHistoryQuery","triggerGetData","setGameName","_useState3","_useState4","isFocused","setIsFocused","debouncedValue","useDebounce","searchEventHandler","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","date","stop","apply","arguments","xmlns","width","height","viewBox","fill","d","fillOpacity","gamePlatforms","PlayStation","PC","macOS","iOS","Linux","AllGamesList","isLastPageSetter","useEffect","Boolean","platfromsSet","Set","platform","Array","from","PageControlls","page","isLastPage","scrollToTop","window","scrollTo","top","disabled","Home","_useSearchParams","useSearchParams","_useSearchParams2","setValue","get","Number","setPagenumber","_useState5","_useState6","setIsLastPage","lightTheme","useContext","Theme","params","set","String"],"sourceRoot":""}