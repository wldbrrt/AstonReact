{"version":3,"file":"static/js/441.2041bbfe.chunk.js","mappings":"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","sources":["components/backButton/backButton.tsx","features/getCurrentDate.ts","components/buttons/closeButton.tsx","assets/arrow_button.svg","components/buttons/arrowButton.tsx","components/gameCard/gameSlider/gameSlider.tsx","components/gameCard/gameItem.tsx","components/gameCard/gameCard.tsx","pages/game.tsx"],"sourcesContent":["import React from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport './backButton.css'\r\n\r\nexport const BackButton = () => {\r\n    const navigate = useNavigate()\r\n    return (\r\n        <div className='backButton__wrapper'>\r\n            <button\r\n                className='button backButton'\r\n                onClick={() => navigate(-1)}\r\n            >\r\n                GO BACK\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","export const getCurrentDate = () => {\r\n    const currentdate = new Date()\r\n    const result =\r\n        currentdate.getDate() +\r\n        '/' +\r\n        (currentdate.getMonth() + 1) +\r\n        '/' +\r\n        currentdate.getFullYear() +\r\n        ' ' +\r\n        currentdate.getHours() +\r\n        ':' +\r\n        currentdate.getMinutes() +\r\n        ':' +\r\n        currentdate.getSeconds()\r\n\r\n    return new Date().toISOString()\r\n}\r\n","import React from 'react'\r\nimport './closeButton.css'\r\n\r\ninterface IcloseButton {\r\n    onclickHandler: (value?: string) => void\r\n    buttonClass: string\r\n}\r\n\r\nexport const CloseButton = ({ onclickHandler, buttonClass }: IcloseButton) => {\r\n    return (\r\n        <button\r\n            onClick={() => onclickHandler()}\r\n            className={buttonClass}\r\n        >\r\n            <span className='closeButton__content'></span>\r\n        </button>\r\n    )\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgArrowButton(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 23,\n    height: 42,\n    viewBox: \"0 0 23 42\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21.5146 3.68126C21.7025 3.48236 21.8495 3.24839 21.947 2.9927C22.0445 2.73702 22.0907 2.46463 22.083 2.19108C22.0753 1.91753 22.0137 1.64819 21.9019 1.39843C21.7901 1.14867 21.6301 0.923376 21.4312 0.735422C21.2323 0.547467 20.9984 0.400529 20.7427 0.302997C20.487 0.205465 20.2146 0.159248 19.9411 0.166986C19.6675 0.174725 19.3982 0.236266 19.1484 0.348096C18.8987 0.459927 18.6734 0.619857 18.4854 0.818755L0.777075 19.5688C0.411374 19.9556 0.207611 20.4677 0.207611 21C0.207611 21.5323 0.411374 22.0444 0.777075 22.4313L18.4854 41.1833C18.6721 41.3866 18.8974 41.5507 19.148 41.6662C19.3987 41.7817 19.6698 41.8462 19.9457 41.856C20.2215 41.8658 20.4965 41.8207 20.7548 41.7233C21.013 41.6259 21.2493 41.4782 21.45 41.2887C21.6507 41.0992 21.8117 40.8717 21.9237 40.6195C22.0357 40.3672 22.0965 40.0952 22.1025 39.8193C22.1085 39.5434 22.0596 39.269 21.9587 39.0121C21.8578 38.7552 21.7068 38.521 21.5146 38.3229L5.15624 21L21.5146 3.68126Z\",\n    fill: \"white\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowButton);\nexport default __webpack_public_path__ + \"static/media/arrow_button.f2dccfb270d77bbc15947f8512173088.svg\";\nexport { ForwardRef as ReactComponent };","import arrowIcon from '../../assets/arrow_button.svg'\r\nimport React from 'react'\r\nimport './arrowButton.css'\r\n\r\ninterface IArrowButton {\r\n    onClickHandler: () => void\r\n    direction: 'left' | 'right'\r\n    buttonClass?: string\r\n    isDisabled?: boolean\r\n}\r\n\r\nexport const ArrowButton = ({\r\n    onClickHandler,\r\n    direction,\r\n    buttonClass,\r\n    isDisabled,\r\n}: IArrowButton) => {\r\n    return (\r\n        <button\r\n            disabled={isDisabled || false}\r\n            onClick={onClickHandler}\r\n            className={\r\n                buttonClass\r\n                    ? `arrowButton arrowButton__${direction} ${buttonClass}`\r\n                    : `arrowButton arrowButton__${direction}`\r\n            }\r\n        >\r\n            <img\r\n                src={arrowIcon}\r\n                alt='arrowButton'\r\n            />\r\n        </button>\r\n    )\r\n}\r\n","import { CloseButton } from '../../buttons/closeButton'\r\nimport { ArrowButton } from '../../buttons/arrowButton'\r\nimport React, { useState } from 'react'\r\nimport './gameSlider.css'\r\n\r\ninterface IGameSlider {\r\n    data: string[] | undefined\r\n    gameName: string\r\n    className?: string\r\n}\r\n\r\nexport const GameSlider = ({ data, gameName, className }: IGameSlider) => {\r\n    const [isActive, setIsActive] = useState<boolean>(false)\r\n    const [activeUrl, setActiveUrl] = useState<string | null>(null)\r\n    const [sliderPosiiton, setSliderPosition] = useState<number>(0)\r\n\r\n    const changeSlide = (\r\n        slidesAmmount: number,\r\n        direction: 'right' | 'left'\r\n    ) => {\r\n        /* if (sliderPosiiton) return */\r\n        if (direction === 'right') {\r\n            setSliderPosition(value => value + 1)\r\n            console.log('SLIDE TO RIGHT')\r\n        }\r\n        if (direction === 'left') {\r\n            setSliderPosition(value => value - 1)\r\n            console.log('SLIDE TO left')\r\n        }\r\n        console.log(slidesAmmount, direction)\r\n    }\r\n    const onclickHandler = (url?: string) => {\r\n        if (!url) {\r\n            setIsActive(false)\r\n            setActiveUrl(null)\r\n            return\r\n        }\r\n        setIsActive(value => !value)\r\n        if (isActive) {\r\n            setActiveUrl(null)\r\n        } else {\r\n            setActiveUrl(url)\r\n        }\r\n    }\r\n\r\n    console.log(sliderPosiiton)\r\n\r\n    return data && data.length ? (\r\n        <div className={className ? `${className} gameSlider` : 'gameSlider'}>\r\n            <ArrowButton\r\n                buttonClass='gameSlider__controlls'\r\n                onClickHandler={() => {\r\n                    changeSlide(data.length, 'left')\r\n                }}\r\n                direction={'left'}\r\n                isDisabled={sliderPosiiton === 0}\r\n            />\r\n            {isActive && activeUrl && (\r\n                <div className='gameSlider__popup'>\r\n                    <CloseButton\r\n                        onclickHandler={onclickHandler}\r\n                        buttonClass='gameSlider__closeButton'\r\n                    />\r\n                    <img\r\n                        className='gameSlider__image_fullscreen'\r\n                        src={activeUrl}\r\n                        alt='gameScreenshot'\r\n                    />\r\n                </div>\r\n            )}\r\n            <div className='gameSlider__wrapper'>\r\n                {data &&\r\n                    data.map((e, ind) => {\r\n                        return (\r\n                            <div\r\n                                key={ind}\r\n                                className='gameSlider__item'\r\n                                onClick={() => onclickHandler(e)}\r\n                                style={{\r\n                                    transform: `translateX(-${\r\n                                        sliderPosiiton * 100\r\n                                    }%)`,\r\n                                }}\r\n                            >\r\n                                <img\r\n                                    className={'gameSlider__image'}\r\n                                    src={e}\r\n                                    alt={`${gameName}_${ind}`}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n            <ArrowButton\r\n                buttonClass='gameSlider__controlls'\r\n                onClickHandler={() => {\r\n                    changeSlide(data.length, 'right')\r\n                }}\r\n                direction={'right'}\r\n                isDisabled={sliderPosiiton === data.length - 2}\r\n            />\r\n        </div>\r\n    ) : (\r\n        <div className='gameSlider__message'>There are no scrennshots yet</div>\r\n    )\r\n}\r\n","import { GameSlider } from './gameSlider/gameSlider'\r\nimport { getCurrentDate } from '../../features/getCurrentDate'\r\nimport {\r\n    IHistoryQueryParams,\r\n    IUserFavoritesProps,\r\n} from '../../types/firestoreApiTypes'\r\nimport { BackButton } from '../backButton/backButton'\r\nimport React from 'react'\r\n\r\ninterface IGameItem {\r\n    name: string\r\n    gameId: number\r\n    rating: number\r\n    releaseDate: string\r\n    image: string\r\n    description: string\r\n    isAuth: boolean\r\n    isInFavorites?: boolean\r\n    triggerUpdate: (value: IUserFavoritesProps) => void\r\n    triggerGet: (value: IHistoryQueryParams) => void\r\n    email: string | null\r\n    dataScreenshots: string[] | undefined\r\n}\r\n\r\nexport const GameItem = ({\r\n    name,\r\n    gameId,\r\n    rating,\r\n    releaseDate,\r\n    image,\r\n    description,\r\n    isAuth,\r\n    isInFavorites,\r\n    triggerUpdate,\r\n    triggerGet,\r\n    email,\r\n    dataScreenshots,\r\n}: IGameItem) => {\r\n    return (\r\n        <>\r\n            <BackButton />\r\n            <div className='game'>\r\n                <h2 className='game__name'>{name}</h2>\r\n                <span className='game__rating'>Rating: {rating}/5</span>\r\n                <span className='game__date'>Released date:{releaseDate}</span>\r\n                <img\r\n                    className='game__img'\r\n                    src={image}\r\n                    alt={name}\r\n                />\r\n                <button\r\n                    disabled={!isAuth || isInFavorites}\r\n                    className='game__add'\r\n                    onClick={() => {\r\n                        triggerUpdate({\r\n                            id: String(gameId),\r\n                            email: email,\r\n                            name: name,\r\n                            background_image: image,\r\n                            date: getCurrentDate(),\r\n                        })\r\n                        triggerGet({ email: email })\r\n                    }}\r\n                >\r\n                    {isInFavorites ? 'In Favorites' : `Add to Favorite`}\r\n                </button>\r\n                <GameSlider\r\n                    className='game__screenshotSlider'\r\n                    data={dataScreenshots}\r\n                    gameName={name}\r\n                />\r\n                <span className='game__description'>{description}</span>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { GameItem } from './gameItem'\r\nimport {\r\n    useGetGameScreenshotsQuery,\r\n    useGetSingleGameQuery,\r\n} from '../../api/gamesAPI'\r\nimport { useAuthorization } from '../../store/hooks'\r\nimport {\r\n    useGetUserFavoritesQuery,\r\n    useLazyGetUserFavoritesQuery,\r\n    useLazyUpdateUserFavoritesQuery,\r\n} from '../../api/firestoreApi'\r\nimport { Loader } from '../loader/loader'\r\nimport React from 'react'\r\nimport './gameCard.css'\r\nimport PropTypes from 'prop-types'\r\n\r\ninterface IgameCardProps {\r\n    gameId: number\r\n}\r\n\r\nfunction GameCard({ gameId }: IgameCardProps) {\r\n    const { email, isAuth } = useAuthorization()\r\n    const { data, isLoading, isFetching, isSuccess, isError, error } =\r\n        useGetSingleGameQuery({ gameId: gameId })\r\n    const { data: dataFav, isSuccess: isSuccessFav } = useGetUserFavoritesQuery(\r\n        { email: email }\r\n    )\r\n    const { data: dataScreenshots } = useGetGameScreenshotsQuery({ gameId })\r\n\r\n    const screenshotsArray = dataScreenshots?.results.map(el => el.image)\r\n\r\n    const [trigger] = useLazyUpdateUserFavoritesQuery()\r\n    const [triggerGet] = useLazyGetUserFavoritesQuery()\r\n\r\n    let content\r\n\r\n    if (isAuth) {\r\n        if (isLoading || isFetching) {\r\n            content = <Loader />\r\n        } else if (isSuccess && isSuccessFav) {\r\n            const dataArrFav = Object.values(dataFav)\r\n            const IdsArr = dataArrFav.map(e => {\r\n                return Number(e.id)\r\n            })\r\n            const isInFavorites = IdsArr.includes(gameId)\r\n\r\n            content = (\r\n                <GameItem\r\n                    name={data.name}\r\n                    gameId={gameId}\r\n                    rating={data.rating}\r\n                    releaseDate={data.released}\r\n                    image={data.background_image}\r\n                    description={data.description_raw}\r\n                    isAuth={isAuth}\r\n                    isInFavorites={isInFavorites}\r\n                    triggerUpdate={trigger}\r\n                    triggerGet={triggerGet}\r\n                    email={email}\r\n                    dataScreenshots={screenshotsArray}\r\n                />\r\n            )\r\n        } else if (isSuccess) {\r\n            content = (\r\n                <GameItem\r\n                    name={data.name}\r\n                    gameId={gameId}\r\n                    rating={data.rating}\r\n                    releaseDate={data.released}\r\n                    image={data.background_image}\r\n                    description={data.description_raw}\r\n                    isAuth={isAuth}\r\n                    triggerUpdate={trigger}\r\n                    triggerGet={triggerGet}\r\n                    email={email}\r\n                    dataScreenshots={screenshotsArray}\r\n                />\r\n            )\r\n        } else if (isError) {\r\n            content = <div>{error.toString()}</div>\r\n        }\r\n\r\n        return <div>{content}</div>\r\n    } else if (isLoading || isFetching) {\r\n        content = <Loader />\r\n    } else if (isSuccess) {\r\n        content = (\r\n            <GameItem\r\n                name={data.name}\r\n                gameId={gameId}\r\n                rating={data.rating}\r\n                releaseDate={data.released}\r\n                image={data.background_image}\r\n                description={data.description_raw}\r\n                isAuth={isAuth}\r\n                triggerUpdate={trigger}\r\n                triggerGet={triggerGet}\r\n                email={email}\r\n                dataScreenshots={screenshotsArray}\r\n            />\r\n        )\r\n    } else if (isError) {\r\n        content = <div>{error.toString()}</div>\r\n    }\r\n\r\n    return <div>{content}</div>\r\n}\r\n\r\nGameCard.propTypes = {\r\n    gameId: PropTypes.number,\r\n}\r\n\r\nexport { GameCard }\r\n","import { GameCard } from '../components/gameCard/gameCard'\r\nimport { useParams } from 'react-router-dom'\r\nimport React from 'react'\r\n\r\nfunction Game() {\r\n    const { id } = useParams()\r\n    const gameId = Number(id)\r\n\r\n    return <GameCard gameId={gameId} />\r\n}\r\n\r\nexport { Game as default }\r\n"],"names":["BackButton","navigate","useNavigate","_jsx","className","children","onClick","getCurrentDate","currentdate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","toISOString","CloseButton","_ref","onclickHandler","buttonClass","ArrowButton","onClickHandler","direction","isDisabled","disabled","concat","src","arrowIcon","alt","GameSlider","data","gameName","_useState","useState","_useState2","_slicedToArray","isActive","setIsActive","_useState3","_useState4","activeUrl","setActiveUrl","_useState5","_useState6","sliderPosiiton","setSliderPosition","changeSlide","slidesAmmount","value","console","log","url","length","_jsxs","map","e","ind","style","transform","GameItem","name","gameId","rating","releaseDate","image","description","isAuth","isInFavorites","triggerUpdate","triggerGet","email","dataScreenshots","_Fragment","id","String","background_image","date","GameCard","content","_useAuthorization","useAuthorization","_useGetSingleGameQuer","useGetSingleGameQuery","isLoading","isFetching","isSuccess","isError","error","_useGetUserFavoritesQ","useGetUserFavoritesQuery","dataFav","isSuccessFav","useGetGameScreenshotsQuery","screenshotsArray","results","el","_useLazyUpdateUserFav","useLazyUpdateUserFavoritesQuery","trigger","_useLazyGetUserFavori","useLazyGetUserFavoritesQuery","Loader","Object","values","Number","includes","released","description_raw","toString","Game","useParams"],"sourceRoot":""}