{"version":3,"file":"static/js/239.2d1e563d.chunk.js","mappings":"6IAAO,IAAMA,EAAiB,WAC1B,IAAMC,EAAc,IAAIC,KAEpBD,EAAYE,UAEXF,EAAYG,WAEbH,EAAYI,cAEZJ,EAAYK,WAEZL,EAAYM,aAEZN,EAAYO,aAEhB,OAAO,IAAIN,MAAOO,aACtB,C,+GCKaC,EAAW,SAAHC,GAYH,IAXdC,EAAID,EAAJC,KACAC,EAAMF,EAANE,OACAC,EAAMH,EAANG,OACAC,EAAWJ,EAAXI,YACAC,EAAKL,EAALK,MACAC,EAAWN,EAAXM,YACAC,EAAMP,EAANO,OACAC,EAAaR,EAAbQ,cACAC,EAAaT,EAAbS,cACAC,EAAUV,EAAVU,WACAC,EAAKX,EAALW,MAEA,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACjBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,aAAYC,SAAEb,KAC5BW,EAAAA,EAAAA,MAAA,QAAMC,UAAU,eAAcC,SAAA,CAAC,WAASX,EAAO,SAC/CS,EAAAA,EAAAA,MAAA,QAAMC,UAAU,aAAYC,SAAA,CAAC,iBAAeV,MAC5CW,EAAAA,EAAAA,KAAA,OACIF,UAAU,YACVG,IAAKX,EACLY,IAAKhB,KAETc,EAAAA,EAAAA,KAAA,UACIG,UAAWX,GAAUC,EACrBK,UAAU,YACVM,QAAS,WACLV,EAAc,CACVW,GAAIC,OAAOnB,GACXS,MAAOA,EACPV,KAAMA,EACNqB,iBAAkBjB,EAClBkB,MAAMlC,EAAAA,EAAAA,OAEVqB,EAAW,CAAEC,MAAOA,GACxB,EAAEG,SAEDN,EAAgB,eAAc,qBAEnCO,EAAAA,EAAAA,KAAA,QAAMF,UAAU,oBAAmBC,SAAER,MAGjD,E,wCC9CA,SAASkB,EAAQxB,GAA8B,IAWvCyB,EAXYvB,EAAMF,EAANE,OAChBwB,GAA0BC,EAAAA,EAAAA,MAAlBhB,EAAKe,EAALf,MAAOJ,EAAMmB,EAANnB,OACfqB,GACIC,EAAAA,EAAAA,IAAsB,CAAE3B,OAAQA,IAD5B4B,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UAAWC,EAAUJ,EAAVI,WAAYC,EAASL,EAATK,UAAWC,EAAON,EAAPM,QAASC,EAAKP,EAALO,MAEzDC,GAAmDC,EAAAA,EAAAA,IAC/C,CAAE1B,MAAOA,IADC2B,EAAOF,EAAbN,KAA0BS,EAAYH,EAAvBH,UAIvBO,GAAkBC,EAAAA,EAAAA,MAAXC,GAA4CC,EAAAA,EAAAA,GAAAH,EAAA,GAArC,GACdI,GAAqBC,EAAAA,EAAAA,MAAdnC,GAA4CiC,EAAAA,EAAAA,GAAAC,EAAA,GAAlC,GAIjB,GAAIrC,EAAQ,CACR,GAAIwB,GAAaC,EACbP,GAAUV,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,SACd,GAAIb,GAAaM,EAAc,CAClC,IAIM/B,EAJauC,OAAOC,OAAOV,GACPW,KAAI,SAAAC,GAC1B,OAAOC,OAAOD,EAAE9B,GACpB,IAC6BgC,SAASlD,GAEtCuB,GACIV,EAAAA,EAAAA,KAAChB,EAAQ,CACLE,KAAM6B,EAAK7B,KACXC,OAAQA,EACRC,OAAQ2B,EAAK3B,OACbC,YAAa0B,EAAKuB,SAClBhD,MAAOyB,EAAKR,iBACZhB,YAAawB,EAAKwB,gBAClB/C,OAAQA,EACRC,cAAeA,EACfC,cAAeiC,EACfhC,WAAYA,EACZC,MAAOA,GAGnB,MAAWsB,EACPR,GACIV,EAAAA,EAAAA,KAAChB,EAAQ,CACLE,KAAM6B,EAAK7B,KACXC,OAAQA,EACRC,OAAQ2B,EAAK3B,OACbC,YAAa0B,EAAKuB,SAClBhD,MAAOyB,EAAKR,iBACZhB,YAAawB,EAAKwB,gBAClB/C,OAAQA,EACRE,cAAeiC,EACfhC,WAAYA,EACZC,MAAOA,IAGRuB,IACPT,GAAUV,EAAAA,EAAAA,KAAA,OAAAD,SAAMqB,EAAMoB,cAG1B,OAAOxC,EAAAA,EAAAA,KAAA,OAAAD,SAAMW,GACjB,CAqBA,OArBWM,GAAaC,EACpBP,GAAUV,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,IACVb,EACPR,GACIV,EAAAA,EAAAA,KAAChB,EAAQ,CACLE,KAAM6B,EAAK7B,KACXC,OAAQA,EACRC,OAAQ2B,EAAK3B,OACbC,YAAa0B,EAAKuB,SAClBhD,MAAOyB,EAAKR,iBACZhB,YAAawB,EAAKwB,gBAClB/C,OAAQA,EACRE,cAAeiC,EACfhC,WAAYA,EACZC,MAAOA,IAGRuB,IACPT,GAAUV,EAAAA,EAAAA,KAAA,OAAAD,SAAMqB,EAAMoB,eAGnBxC,EAAAA,EAAAA,KAAA,OAAAD,SAAMW,GACjB,C,cC7FA,SAAS+B,IACL,IAAQpC,GAAOqC,EAAAA,EAAAA,MAAPrC,GACFlB,EAASiD,OAAO/B,GAEtB,OAAOL,EAAAA,EAAAA,KAACS,EAAQ,CAACtB,OAAQA,GAC7B,C","sources":["features/getCurrentDate.ts","components/gameCard/gameItem.tsx","components/gameCard/gameCard.tsx","pages/game.tsx"],"sourcesContent":["export const getCurrentDate = () => {\r\n    const currentdate = new Date()\r\n    const result =\r\n        currentdate.getDate() +\r\n        '/' +\r\n        (currentdate.getMonth() + 1) +\r\n        '/' +\r\n        currentdate.getFullYear() +\r\n        ' ' +\r\n        currentdate.getHours() +\r\n        ':' +\r\n        currentdate.getMinutes() +\r\n        ':' +\r\n        currentdate.getSeconds()\r\n\r\n    return new Date().toISOString()\r\n}\r\n","import { getCurrentDate } from '../../features/getCurrentDate'\r\nimport {\r\n    IHistoryQueryParams,\r\n    IUserFavoritesProps,\r\n} from '../../types/firestoreApiTypes'\r\nimport React from 'react'\r\n\r\ninterface IGameItem {\r\n    name: string\r\n    gameId: number\r\n    rating: number\r\n    releaseDate: string\r\n    image: string\r\n    description: string\r\n    isAuth: boolean\r\n    isInFavorites?: boolean\r\n    triggerUpdate: (value: IUserFavoritesProps) => void\r\n    triggerGet: (value: IHistoryQueryParams) => void\r\n    email: string | null\r\n}\r\n\r\nexport const GameItem = ({\r\n    name,\r\n    gameId,\r\n    rating,\r\n    releaseDate,\r\n    image,\r\n    description,\r\n    isAuth,\r\n    isInFavorites,\r\n    triggerUpdate,\r\n    triggerGet,\r\n    email,\r\n}: IGameItem) => {\r\n    return (\r\n        <div className='game'>\r\n            <h2 className='game__name'>{name}</h2>\r\n            <span className='game__rating'>Rating: {rating}/5</span>\r\n            <span className='game__date'>Released date:{releaseDate}</span>\r\n            <img\r\n                className='game__img'\r\n                src={image}\r\n                alt={name}\r\n            />\r\n            <button\r\n                disabled={!isAuth || isInFavorites}\r\n                className='game__add'\r\n                onClick={() => {\r\n                    triggerUpdate({\r\n                        id: String(gameId),\r\n                        email: email,\r\n                        name: name,\r\n                        background_image: image,\r\n                        date: getCurrentDate(),\r\n                    })\r\n                    triggerGet({ email: email })\r\n                }}\r\n            >\r\n                {isInFavorites ? 'In Favorites' : `Add to Favorite`}\r\n            </button>\r\n            <span className='game__description'>{description}</span>\r\n        </div>\r\n    )\r\n}\r\n","import { GameItem } from './gameItem'\r\nimport { useGetSingleGameQuery } from '../../api/gamesAPI'\r\nimport { useAuthorization } from '../../store/hooks'\r\nimport {\r\n    useGetUserFavoritesQuery,\r\n    useLazyGetUserFavoritesQuery,\r\n    useLazyUpdateUserFavoritesQuery,\r\n} from '../../api/firestoreApi'\r\nimport { Loader } from '../loader/loader'\r\nimport React from 'react'\r\nimport './gameCard.css'\r\nimport PropTypes from 'prop-types'\r\n\r\ninterface IgameCardProps {\r\n    gameId: number\r\n}\r\n\r\nfunction GameCard({ gameId }: IgameCardProps) {\r\n    const { email, isAuth } = useAuthorization()\r\n    const { data, isLoading, isFetching, isSuccess, isError, error } =\r\n        useGetSingleGameQuery({ gameId: gameId })\r\n    const { data: dataFav, isSuccess: isSuccessFav } = useGetUserFavoritesQuery(\r\n        { email: email }\r\n    )\r\n\r\n    const [trigger] = useLazyUpdateUserFavoritesQuery()\r\n    const [triggerGet] = useLazyGetUserFavoritesQuery()\r\n\r\n    let content\r\n\r\n    if (isAuth) {\r\n        if (isLoading || isFetching) {\r\n            content = <Loader />\r\n        } else if (isSuccess && isSuccessFav) {\r\n            const dataArrFav = Object.values(dataFav)\r\n            const IdsArr = dataArrFav.map(e => {\r\n                return Number(e.id)\r\n            })\r\n            const isInFavorites = IdsArr.includes(gameId)\r\n\r\n            content = (\r\n                <GameItem\r\n                    name={data.name}\r\n                    gameId={gameId}\r\n                    rating={data.rating}\r\n                    releaseDate={data.released}\r\n                    image={data.background_image}\r\n                    description={data.description_raw}\r\n                    isAuth={isAuth}\r\n                    isInFavorites={isInFavorites}\r\n                    triggerUpdate={trigger}\r\n                    triggerGet={triggerGet}\r\n                    email={email}\r\n                />\r\n            )\r\n        } else if (isSuccess) {\r\n            content = (\r\n                <GameItem\r\n                    name={data.name}\r\n                    gameId={gameId}\r\n                    rating={data.rating}\r\n                    releaseDate={data.released}\r\n                    image={data.background_image}\r\n                    description={data.description_raw}\r\n                    isAuth={isAuth}\r\n                    triggerUpdate={trigger}\r\n                    triggerGet={triggerGet}\r\n                    email={email}\r\n                />\r\n            )\r\n        } else if (isError) {\r\n            content = <div>{error.toString()}</div>\r\n        }\r\n\r\n        return <div>{content}</div>\r\n    } else if (isLoading || isFetching) {\r\n        content = <Loader />\r\n    } else if (isSuccess) {\r\n        content = (\r\n            <GameItem\r\n                name={data.name}\r\n                gameId={gameId}\r\n                rating={data.rating}\r\n                releaseDate={data.released}\r\n                image={data.background_image}\r\n                description={data.description_raw}\r\n                isAuth={isAuth}\r\n                triggerUpdate={trigger}\r\n                triggerGet={triggerGet}\r\n                email={email}\r\n            />\r\n        )\r\n    } else if (isError) {\r\n        content = <div>{error.toString()}</div>\r\n    }\r\n\r\n    return <div>{content}</div>\r\n}\r\n\r\nGameCard.propTypes = {\r\n    gameId: PropTypes.number,\r\n}\r\n\r\nexport { GameCard }\r\n","import { GameCard } from '../components/gameCard/gameCard'\r\nimport { useParams } from 'react-router-dom'\r\nimport React from 'react'\r\n\r\nfunction Game() {\r\n    const { id } = useParams()\r\n    const gameId = Number(id)\r\n\r\n    return <GameCard gameId={gameId} />\r\n}\r\n\r\nexport { Game as default }\r\n"],"names":["getCurrentDate","currentdate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","toISOString","GameItem","_ref","name","gameId","rating","releaseDate","image","description","isAuth","isInFavorites","triggerUpdate","triggerGet","email","_jsxs","className","children","_jsx","src","alt","disabled","onClick","id","String","background_image","date","GameCard","content","_useAuthorization","useAuthorization","_useGetSingleGameQuer","useGetSingleGameQuery","data","isLoading","isFetching","isSuccess","isError","error","_useGetUserFavoritesQ","useGetUserFavoritesQuery","dataFav","isSuccessFav","_useLazyUpdateUserFav","useLazyUpdateUserFavoritesQuery","trigger","_slicedToArray","_useLazyGetUserFavori","useLazyGetUserFavoritesQuery","Loader","Object","values","map","e","Number","includes","released","description_raw","toString","Game","useParams"],"sourceRoot":""}